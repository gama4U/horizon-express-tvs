generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                 @unique
  password              String
  avatar                String?
  userType              UserType
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  transactions          Transaction[]
  salesAgreements       SalesAgreement[]
  purchaseRequestOrders PurchaseRequestOrder[]
}

model SalesAgreement {
  id                  String                @id @default(cuid())
  creatorId           String
  typeOfClient        ClientType
  clientName          String?
  preparedBy          String?
  approvedBy          String?
  serialNumber        String
  salesAgreementItems SalesAgreementItem[]
  purchaseOrder       PurchaseRequestOrder?
  transaction         Transaction?
  creator             User                  @relation(fields: [creatorId], references: [id])
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
}

model Transaction {
  id                   String                @id @default(cuid())
  leadId               String
  salesAgreementId     String?                @unique
  travelVoucher        Travel?
  accommodationVoucher Accommodation?
  tourVoucher          Tour?
  transportVoucher     Transportation?
  purchaseOrder        PurchaseRequestOrder?
  salesAgreement       SalesAgreement?        @relation(fields: [salesAgreementId], references: [id])
  lead                 User                  @relation(fields: [leadId], references: [id])
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
}

model SalesAgreementItem {
  id               String         @id @default(cuid())
  salesAgreementId String
  particulars      String?
  quantity         Int?
  unitPrice        Float?
  total            Float?
  salesAgreement   SalesAgreement @relation(fields: [salesAgreementId], references: [id])
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt
}

model PurchaseRequestOrder {
  id                 String                     @id @default(cuid())
  transactionId      String                     @unique
  creatorId          String?
  serialNumber       String
  salesAgreementId   String                     @unique
  suppliersName      String?
  expenses           String?
  other              String?
  nos                String?
  type               PurchaseRequestOrderType?
  paymentType        PaymentType?
  purchaseOrderItems PurchaseRequestOrderItem[]
  transaction        Transaction                @relation(fields: [transactionId], references: [id])
  creator            User?                      @relation(fields: [creatorId], references: [id])
  salesAgreement     SalesAgreement             @relation(fields: [salesAgreementId], references: [id])
  createdAt          DateTime?                  @default(now())
  updatedAt          DateTime?                  @updatedAt
}

model PurchaseRequestOrderItem {
  id                     String               @id @default(cuid())
  purchaseRequestOrderId String
  particulars            String?
  quantity               Int?
  unitPrice              Float?
  total                  Float?
  purchaseRequestOrder   PurchaseRequestOrder @relation(fields: [purchaseRequestOrderId], references: [id])
  createdAt              DateTime?            @default(now())
  updatedAt              DateTime?            @updatedAt
}

model Travel {
  id            String       @id @default(cuid())
  transactionId String?      @unique
  type          TravelType
  airline       Airlines?
  shipping      Shipping?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
}

model Airlines {
  id          String    @id @default(cuid())
  travelId    String?   @unique
  name        String
  code        String
  etd         DateTime
  eta         DateTime
  origin      String
  destination String
  travel      Travel?   @relation(fields: [travelId], references: [id])
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Shipping {
  id           String   @id @default(cuid())
  travelId     String?  @unique
  name         String
  voyageNumber String
  dateOfTravel DateTime
  origin       String
  destination  String
  travel       Travel?  @relation(fields: [travelId], references: [id])
}

model Accommodation {
  id                      String            @id @default(cuid())
  transactionId           String?           @unique
  type                    AccommodationType
  name                    String
  checkinDate             DateTime
  checkoutDate            DateTime
  hotelConfirmationNumber String
  remarks                 String?
  transaction             Transaction?      @relation(fields: [transactionId], references: [id])
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @updatedAt
}

model Tour {
  id            String       @id @default(cuid())
  transactionId String?      @unique
  remarks       String?
  driverName    String
  driverContact String
  itineraries   Itinerary[]
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
}

model Itinerary {
  id          String         @id @default(cuid())
  tourId      String
  transportId String
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  transport   Transportation @relation(fields: [transportId], references: [id])
  tour        Tour           @relation(fields: [tourId], references: [id])
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt
}

model Transportation {
  id                 String               @id @default(cuid())
  transactionId      String?              @unique
  driverName         String
  driverContact      String
  remarks            String?
  vehiclePlateNumber String
  serviceType        TransportServiceType
  vehicleType        VehicleType
  itineraries        Itinerary[]
  transaction        Transaction?         @relation(fields: [transactionId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

enum UserType {
  ADMIN
  EMPLOYEE
}

enum ClientType {
  WALK_IN
  CORPORATE
  GOVERNMENT
}

enum PurchaseRequestOrderType {
  TICKET
  LOCAL_PACKAGE
  INTERNATIONAL_PACKAGE
  HOTEL
  VISA
}

enum PaymentType {
  CASH
  CHECK
}

enum TransportServiceType {
  PUDO
  WHOLE_DAY
  HALF_DAY
  MULTIPLE
}

enum VehicleType {
  VAN
  SUV
  COASTER
  SEDAN
  BUS
}

enum TravelType {
  AIRLINES
  SHIPPING
}

enum AccommodationType {
  HOTEL
  RESORT
  AIRBNB
  OTHERS
}
