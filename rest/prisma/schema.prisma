generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                       String                 @id @default(cuid())
  firstName                                String
  lastName                                 String
  email                                    String                 @unique
  password                                 String
  avatar                                   String?
  userType                                 UserType
  createdAt                                DateTime               @default(now())
  updatedAt                                DateTime               @updatedAt
  purchaseRequestOrders                    PurchaseRequestOrder[]
  salesAgreements                          SalesAgreement[]
  Transaction_Transaction_approverIdToUser Transaction[]          @relation("Transaction_approverIdToUser")
  Transaction_Transaction_creatorIdToUser  Transaction[]          @relation("Transaction_creatorIdToUser")
}

model Transaction {
  id                                String                @id @default(cuid())
  salesAgreementId                  String?               @unique
  purchaseOrderId                   String?               @unique
  leadId                            String
  createdAt                         DateTime?             @default(now())
  updatedAt                         DateTime?             @updatedAt
  approverId                        String?
  creatorId                         String?
  accommodationVoucher              Accommodation[]
  tourVoucher                       Tour[]
  User_Transaction_approverIdToUser User?                 @relation("Transaction_approverIdToUser", fields: [approverId], references: [id])
  User_Transaction_creatorIdToUser  User?                 @relation("Transaction_creatorIdToUser", fields: [creatorId], references: [id])
  lead                              Lead                  @relation(fields: [leadId], references: [id])
  purchaseOrder                     PurchaseRequestOrder? @relation(fields: [purchaseOrderId], references: [id])
  salesAgreement                    SalesAgreement?       @relation(fields: [salesAgreementId], references: [id])
  transportVoucher                  Transportation[]
  travelVoucher                     Travel[]
}

model SalesAgreement {
  id                  String                @id @default(cuid())
  creatorId           String
  typeOfClient        ClientType
  clientName          String?
  preparedBy          String?
  approvedBy          String?
  serialNumber        String
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  purchaseOrder       PurchaseRequestOrder?
  creator             User                  @relation(fields: [creatorId], references: [id])
  salesAgreementItems SalesAgreementItem[]
  transaction         Transaction?
}

model SalesAgreementItem {
  id               String         @id @default(cuid())
  salesAgreementId String
  particulars      String?
  quantity         Int?
  unitPrice        Float?
  total            Float?
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt
  salesAgreement   SalesAgreement @relation(fields: [salesAgreementId], references: [id])
}

model PurchaseRequestOrder {
  id                 String                     @id @default(cuid())
  creatorId          String?
  serialNumber       String
  salesAgreementId   String?                    @unique
  suppliersName      String?
  expenses           String?
  other              String?
  nos                String?
  type               PurchaseRequestOrderType?
  paymentType        PaymentType?
  createdAt          DateTime?                  @default(now())
  updatedAt          DateTime?                  @updatedAt
  creator            User?                      @relation(fields: [creatorId], references: [id])
  salesAgreement     SalesAgreement?            @relation(fields: [salesAgreementId], references: [id])
  purchaseOrderItems PurchaseRequestOrderItem[]
  transaction        Transaction?
}

model Lead {
  id            String        @id @default(cuid())
  firstName     String
  middleName    String
  lastName      String
  email         String
  contactNumber String
  documents     String[]
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  transactions  Transaction[]
}

model PurchaseRequestOrderItem {
  id                     String               @id @default(cuid())
  purchaseRequestOrderId String
  particulars            String?
  quantity               Int?
  unitPrice              Float?
  total                  Float?
  createdAt              DateTime?            @default(now())
  updatedAt              DateTime?            @updatedAt
  purchaseRequestOrder   PurchaseRequestOrder @relation(fields: [purchaseRequestOrderId], references: [id])
}

model Travel {
  id            String      @id @default(cuid())
  transactionId String
  type          TravelType
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  airline       Airlines?
  shipping      Shipping?
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Airlines {
  id          String    @id @default(cuid())
  travelId    String?   @unique
  name        String
  code        String
  etd         DateTime
  eta         DateTime
  origin      String
  destination String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  travel      Travel?   @relation(fields: [travelId], references: [id], onDelete: Cascade)
}

model Shipping {
  id           String   @id @default(cuid())
  travelId     String?  @unique
  name         String
  voyageNumber String
  dateOfTravel DateTime
  origin       String
  destination  String
  travel       Travel?  @relation(fields: [travelId], references: [id], onDelete: Cascade)
}

model Accommodation {
  id                      String            @id @default(cuid())
  transactionId           String
  type                    AccommodationType
  name                    String
  checkinDate             DateTime
  checkoutDate            DateTime
  hotelConfirmationNumber String
  remarks                 String?
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @updatedAt
  transaction             Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Tour {
  id            String          @id @default(cuid())
  transactionId String
  remarks       String?
  tourGuide     String
  tourContact   String
  driverName    String
  driverContact String
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  transaction   Transaction     @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  itineraries   TourItinerary[]
}

model TourItinerary {
  id          String    @id @default(cuid())
  tourId      String?
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  tour        Tour?     @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model Transportation {
  id                 String               @id @default(cuid())
  transactionId      String
  driverName         String
  driverContact      String
  remarks            String?
  vehiclePlateNumber String
  serviceType        TransportServiceType
  vehicleType        VehicleType
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  itineraries        TransportItinerary[]
  transaction        Transaction          @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model TransportItinerary {
  id          String          @id @default(cuid())
  transportId String?
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  transport   Transportation? @relation(fields: [transportId], references: [id], onDelete: Cascade)
}

enum UserType {
  ADMIN
  EMPLOYEE
}

enum ClientType {
  WALK_IN
  CORPORATE
  GOVERNMENT
}

enum PurchaseRequestOrderType {
  TICKET
  LOCAL_PACKAGE
  INTERNATIONAL_PACKAGE
  HOTEL
  VISA
}

enum PaymentType {
  CASH
  CHECK
}

enum TransportServiceType {
  PUDO
  WHOLE_DAY
  HALF_DAY
  MULTIPLE
}

enum VehicleType {
  VAN
  SUV
  COASTER
  SEDAN
  BUS
}

enum TravelType {
  AIRLINES
  SHIPPING
}

enum AccommodationType {
  HOTEL
  RESORT
  AIRBNB
  OTHERS
}
